#!/usr/bin/perl

use Net::Ping;
$ping = Net::Ping->new();

#Set variables
$home = $ENV{'HOME'};
$username=`whoami`;
$serverlist='/tps/wts/serverlist';
chomp ($wtscfg  = "$home/wts.$username");
open(SRVLIST, "$serverlist") or die ("Unable to open serverlist file!");
@winserver = <SRVLIST>;
close (SRVLIST);
$randnums = scalar (@winserver);
#print "length is $randnums\n";
#Clean up command line switch
$switch = $ARGV[0];	#Set $switch to be the first argument of wts
$switch =~ s/\W.*//; 	#Isolate the first word
$switch =~ tr/A_Z/a-z/; #Lowercase everything

#Print usage or define small screen if "small" is specified
if ($switch eq "help") {
        print "wts - A wrapper script for rdesktop\n";
        print "Usage: wts small/help/dual\n";
        print "[small] Reduce screen size to 1024x768\n";
        print "[dual] Enlarge screen size to 3000x1100\n";
        print "[help] Display this help\n";
	exit 
	}
elsif ($switch eq "small") {
	print "Using small screen size\n";
	}

#Read the .wts file if located, otherwise randomly pick a server
#and write that server to the .wts file
sub read_gen_wts
{
unless (open (prefs,"$wtscfg")) {
                print "$wtscfg not file found\n";
                $random = int(rand($randnums));
		$server = "$winserver[$random]";
		chomp ($server);
                open (wts,">$wtscfg") || warn "Can't create $wtscfg";
                print wts "$server\n";
                close (wts);
        			} 
	else
        		{
                print "$wtscfg file found\n";
                while (<prefs>) {
                chomp;
                $server=$_;
                		}
        		}
}

read_gen_wts();

#Check to see if the server can be pinged, otherwise delete invalid
#.wts and re-pick another server.


$system=`uname -s`;
chomp $system;
chomp ($server);


if ($system eq "Linux") {
until ($ping->ping("$server",1) ) {
print "Can't ping server $server";
unlink ($wtscfg) or warn "Can't unlink $wtscfg: $!";
print "::\tDeleting $wtscfg file\n";
read_gen_wts();
}

}


if ($system eq "SunOS") {
	$os = "Solaris";
	$rdesktop = "/tps/bin/rdesktop -N";
	}

if ($system eq "Linux") {
	if (`grep "Red" /etc/redhat-release`) {
		$os = "RedHat";
		$rdesktop = "/usr/bin/rdesktop -a24 -xl -r sound -r disk:local=/local/";
		}
	if (`grep "Enterprise" /etc/redhat-release`) {
		$os = "Fedora";
		$rdesktop = "/tps/bin/rdesktop-patched -d ONSHORE -a24 -xl -r sound -r disk:local=/local/";
		}
	if (`grep "Fedora" /etc/redhat-release`) {
		$os = "Fedora";
		$rdesktop = "/usr/bin/rdesktop -a16 -r sound";
		}
	if (`grep "CentOS" /etc/redhat-release`) {
		$os = "Fedora";
		$rdesktop = "/tps/bin/rdesktop-patched -d ONSHORE -a24 -xl -r sound -r disk:local=/local/";
		}
		
			}

print "System OS is $os\n";
print "System is $system\n";
print "Server is $server\n";
print "Rdesktop is $rdesktop\n";

if ($switch eq "small") {
	$screen = "1024x768";
			} 
elsif ($switch eq "dual") {
	$screen = "3000x1100";
			}
elsif ($switch eq "wide") {
	$screen = "1680x1080";
			}
elsif ($os eq "Solaris") {
	$screen = "1024x768";
			}
else	
			{
			$screen = "1500x1100";
			}

#Write debug information 
#$hostname=`hostname`;
#chomp $username;

#open (DEBUG, '>>/lobby/janky01/wts_state/wts2.debug');
#print DEBUG "User $username is running command $rdesktop using screensize $screen on server $server from $hostname\n";
#close (DEBUG);


system "$rdesktop -g $screen $server &"
